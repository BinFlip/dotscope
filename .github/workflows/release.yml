name: Release and Publish

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/release.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  # First ensure all tests pass
  test:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-features --all-targets -- -D warnings
      env:
        RUSTFLAGS: "-Dwarnings"
      
    - name: Run tests
      run: cargo test --all-features --verbose
      
    - name: Run doc tests
      run: cargo test --doc --all-features
      
    - name: Check documentation
      run: cargo doc --all-features --no-deps

  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from Cargo.toml
      id: version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d '"' -f 2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Check if release exists
      id: check_release
      run: |
        if gh release view "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate changelog
      id: changelog
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          # No previous tags, get all commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          # Get commits since the latest tag
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="- Initial release"
        fi
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Changes in v${{ steps.version.outputs.version }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          Add this to your `Cargo.toml`:
          
          ```toml
          [dependencies]
          dotscope = "${{ steps.version.outputs.version }}"
          ```
          
          Or install via cargo:
          
          ```bash
          cargo add dotscope
          ```
        draft: false
        prerelease: false

  # Publish to crates.io
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, create-release]
    if: needs.create-release.outputs.version != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      
    - name: Verify package can be published
      run: cargo publish --dry-run --all-features
      
    - name: Publish to crates.io
      run: cargo publish --all-features
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Verify documentation builds correctly
  verify-docs:
    name: Verify Documentation
    runs-on: ubuntu-latest
    needs: [test, create-release]
    if: needs.create-release.outputs.version != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      
    - name: Build documentation for docs.rs
      run: |
        cargo doc --all-features --no-deps --document-private-items
        echo "âœ… Documentation builds successfully"
        echo "ðŸ“š Documentation will be automatically available at https://docs.rs/dotscope after publishing"
